// <auto-generated />
using System;
using DigitalPassportBackend.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace DigitalPassportBackend.Migrations
{
    [DbContext(typeof(DigitalPassportDbContext))]
    [Migration("20250302172637_SoftDeleteBucketListCompletion")]
    partial class SoftDeleteBucketListCompletion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DigitalPassportBackend.Domain.BucketListItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("parkId")
                        .HasColumnType("int")
                        .HasColumnName("park");

                    b.Property<string>("task")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("id");

                    b.HasIndex("parkId");

                    b.ToTable("bucket_list_items");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.CollectedStamp", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Point>("location")
                        .IsRequired()
                        .HasColumnType("point");

                    b.Property<string>("method")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("parkId")
                        .HasColumnType("int")
                        .HasColumnName("park");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("userId")
                        .HasColumnType("int")
                        .HasColumnName("user");

                    b.HasKey("id");

                    b.HasIndex("parkId");

                    b.HasIndex("userId");

                    b.ToTable("collected_stamps");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.CompletedBucketListItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("bucketListItemId")
                        .HasColumnType("int")
                        .HasColumnName("bucket_list_item");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("deleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("deleted");

                    b.Property<Point>("location")
                        .IsRequired()
                        .HasColumnType("point");

                    b.Property<int>("parkId")
                        .HasColumnType("int")
                        .HasColumnName("park");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("userId")
                        .HasColumnType("int")
                        .HasColumnName("user");

                    b.HasKey("id");

                    b.HasIndex("bucketListItemId");

                    b.HasIndex("parkId");

                    b.HasIndex("userId");

                    b.ToTable("completed_bucket_list_items");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.Park", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("accesses")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<GeometryCollection>("boundaries")
                        .HasColumnType("GEOMETRYCOLLECTION");

                    b.Property<string>("city")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Point>("coordinates")
                        .HasColumnType("point");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("establishedYear")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("established_year");

                    b.Property<string>("landmark")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("parkAbbreviation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("park_abbreviation");

                    b.Property<string>("parkName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("park_name");

                    b.Property<string>("parkType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("park_type");

                    b.Property<long?>("phone")
                        .HasColumnType("bigint");

                    b.Property<string>("stampImage")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("stamp_image");

                    b.Property<string>("trails")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("youCanFind")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("you_can_find");

                    b.HasKey("id");

                    b.ToTable("parks");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.ParkAddress", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("addressLineOne")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address_line_one");

                    b.Property<string>("addressLineTwo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address_line_two");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("parkId")
                        .HasColumnType("int")
                        .HasColumnName("park");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("zipcode")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("parkId");

                    b.ToTable("park_addresses");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.ParkIcon", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("icon")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("parkId")
                        .HasColumnType("int")
                        .HasColumnName("park");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("id");

                    b.HasIndex("parkId");

                    b.ToTable("park_icons");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.ParkPhoto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("alt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("parkId")
                        .HasColumnType("int")
                        .HasColumnName("park");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("id");

                    b.HasIndex("parkId");

                    b.ToTable("park_photos");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.ParkVisit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("parkId")
                        .HasColumnType("int")
                        .HasColumnName("park");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("userId")
                        .HasColumnType("int")
                        .HasColumnName("user");

                    b.HasKey("id");

                    b.HasIndex("parkId");

                    b.HasIndex("userId");

                    b.ToTable("park_visits");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.PrivateNote", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("parkId")
                        .HasColumnType("int")
                        .HasColumnName("park");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("userId")
                        .HasColumnType("int")
                        .HasColumnName("user");

                    b.HasKey("id");

                    b.HasIndex("parkId");

                    b.HasIndex("userId");

                    b.ToTable("private_notes");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.Trail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("length")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("trailName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("trail_name");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("id");

                    b.ToTable("trails");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.TrailIcon", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("icon")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("trailId")
                        .HasColumnType("int")
                        .HasColumnName("trail");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("id");

                    b.HasIndex("trailId");

                    b.ToTable("trail_icons");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            createdAt = new DateTime(2025, 3, 2, 17, 26, 37, 45, DateTimeKind.Utc).AddTicks(1981),
                            password = "10000.nXlE+qJIZmoO19TK7ldpVg==.TYcEgCKG+A+Vx46o+C9SGjN18ej5thWuE1q7K0Z4rK0=",
                            role = "admin",
                            updatedAt = new DateTime(2025, 3, 2, 17, 26, 37, 45, DateTimeKind.Utc).AddTicks(1963),
                            username = "superAdmin"
                        },
                        new
                        {
                            id = 2,
                            createdAt = new DateTime(2025, 3, 2, 17, 26, 37, 47, DateTimeKind.Utc).AddTicks(3920),
                            password = "10000.bQx81rcabJDRjLlzdPWHaA==.BTb9WB3VXZ7BMUbe1ON2OlkKHS1+2LpeLRieWMtcoMc=",
                            role = "visitor",
                            updatedAt = new DateTime(2025, 3, 2, 17, 26, 37, 47, DateTimeKind.Utc).AddTicks(3893),
                            username = "testUser"
                        });
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.BucketListItem", b =>
                {
                    b.HasOne("DigitalPassportBackend.Domain.Park", "park")
                        .WithMany()
                        .HasForeignKey("parkId");

                    b.Navigation("park");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.CollectedStamp", b =>
                {
                    b.HasOne("DigitalPassportBackend.Domain.Park", "park")
                        .WithMany()
                        .HasForeignKey("parkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalPassportBackend.Domain.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("park");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.CompletedBucketListItem", b =>
                {
                    b.HasOne("DigitalPassportBackend.Domain.BucketListItem", "bucketListItem")
                        .WithMany()
                        .HasForeignKey("bucketListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalPassportBackend.Domain.Park", "park")
                        .WithMany()
                        .HasForeignKey("parkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalPassportBackend.Domain.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("bucketListItem");

                    b.Navigation("park");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.ParkAddress", b =>
                {
                    b.HasOne("DigitalPassportBackend.Domain.Park", "park")
                        .WithMany()
                        .HasForeignKey("parkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("park");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.ParkIcon", b =>
                {
                    b.HasOne("DigitalPassportBackend.Domain.Park", "park")
                        .WithMany()
                        .HasForeignKey("parkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("park");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.ParkPhoto", b =>
                {
                    b.HasOne("DigitalPassportBackend.Domain.Park", "park")
                        .WithMany()
                        .HasForeignKey("parkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("park");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.ParkVisit", b =>
                {
                    b.HasOne("DigitalPassportBackend.Domain.Park", "park")
                        .WithMany()
                        .HasForeignKey("parkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalPassportBackend.Domain.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("park");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.PrivateNote", b =>
                {
                    b.HasOne("DigitalPassportBackend.Domain.Park", "park")
                        .WithMany()
                        .HasForeignKey("parkId");

                    b.HasOne("DigitalPassportBackend.Domain.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("park");

                    b.Navigation("user");
                });

            modelBuilder.Entity("DigitalPassportBackend.Domain.TrailIcon", b =>
                {
                    b.HasOne("DigitalPassportBackend.Domain.Trail", "trail")
                        .WithMany()
                        .HasForeignKey("trailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("trail");
                });
#pragma warning restore 612, 618
        }
    }
}
